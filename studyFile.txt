设置系统环境变量，运行Java JDK
JAVA_HOME    D:\JDK
%JAVA_HOME%\bin;


set path   (设置临时环境变量)

set classpath=c:myclass;   .;c:myclass     set classpath=.;%classpath%

编译  javac *.java    (检查语法错误,编译的是Java文件)    

运行  java *



关键字、标示符（Java中严格区分大小写）、注释（和js类似）

/**
Java专用注释符（文档注释）
*/


主函数格式
class Demo
{
	public static void main(String[] agrs)
	{
	 	System.out.println("hello world!");
	}
}


第一步先写注释（需求），写js也是如此，高手的涵养。
（
思路：
1、定义一个类，因为Java程序都定义类中，Java程序都是以类的形势存在，类的形势其实就是一个字节码文件最终体现。
2、定义一个主函数。为了让该类可以独立运行。


步骤：
1、用class关键字来完成类的定义，并起一个阅读性强的类名。
2、主函数：public static void main(String[] args)这是固定格式的。jvm认识

代码仅仅是思想的一种体现形式。 
）



字符常量     将一个数字字母或者符号用单引号('')标示

字符串常量   将一个或者多个字符用双引号("")标示


负数的二进制的最高位是1


Java强类型语言   //数据类型   变量名 = 初始化值



整数类型（byte > short > int > long）

浮点类型（float，double）

字符型（char）

布尔型（boolean）

类（class）

接口（interface）

数组（[]）


自动类型提升



&&   短路。当左边是false时，右边不参与运算的

&    会进行2次运算，无论左边的运算是什么，右边都参与运算




||   当左边是true时，右边不参与运算的

|    会进行2次运算，无论左边的运算是什么，右边都参与运算



System.out.println(6&3);
//与运算
		
System.out.println(6|3);
//或运算
		
System.out.println(~6);
//反码


js没有代码块的概念
{
   var a = 1;
   console.log(a)
}
   console.log(a)

 
这里的a都能打印出来



Java有代码块的概念(变量区间、作用域)
局部代码块可以定义局部变量的生命周期

{
  //代码块
}


if:
	1、对具体的值进行判断
	2、对区间判断
	3、对运算结果是boolean类型的表达式进行判断


switch：
	1、对具体的值进行判断
	2、值得个数通常是固定的

对于几个固定的值判断，建议使用switch语句，因为switch语句会将具体的答案都加载进内存。
效率相对高一点。

break：跳出
break作用的范围：要么是switch语句，要么是循环语句。
当break语句存在时，下面不要定义其他语句，因为执行不到

break跳出所在的当前循环
如果出现了循环嵌套，break想要跳出指定的循环，可以通过标号来完成
 
 
continue:继续
作用的范围：循环的结构

continue：结束本次循环，继续下次循环。
如果continue单独存在时，下面不要有任何语句，因为执行不到



函数就是定义在类中的具有特定功能的一段独立小程序
函数也称为方法

定义函数的格式：

修饰符 返回值类型 函数名（参数类型 形式参数1，参数类型 形式参数2，...）
{
	执行语句；
	return 返回值；
}

特殊情况：
功能没有具体的返回值。

这时return的后面直接用分号结束
返回值类型怎么体现呢？因为没有具体值，所有不可以写具体的数据类型。
在Java中只能用一个关键字来表示这种情况。关键字是：void。

总结： 没有具体返回值时，返回值类型用void来表示。

注意： 如果返回值类型是void，那么函数中的return语句可以省略不写。

	函数中只能调用函数，不可以在函数内部定义函数。（public是函数的开始）

	定义函数时，函数的结果应该返回给调用者，交由调用者处理。



 
	






