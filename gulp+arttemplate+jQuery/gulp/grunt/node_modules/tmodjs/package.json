{
  "_args": [
    [
      {
        "raw": "tmodjs@git+https://github.com/calledT/tmodjs.git",
        "scope": null,
        "escapedName": "tmodjs",
        "name": "tmodjs",
        "rawSpec": "git+https://github.com/calledT/tmodjs.git",
        "spec": "git+https://github.com/calledT/tmodjs.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:calledT/tmodjs.git",
          "sshUrl": "git+ssh://git@github.com/calledT/tmodjs.git",
          "httpsUrl": "git+https://github.com/calledT/tmodjs.git",
          "gitUrl": "git://github.com/calledT/tmodjs.git",
          "shortcut": "github:calledT/tmodjs",
          "directUrl": "https://raw.githubusercontent.com/calledT/tmodjs/master/package.json"
        }
      },
      "F:\\grunt\\node_modules\\gulp-tmod"
    ]
  ],
  "_from": "git+https://github.com/calledT/tmodjs.git",
  "_id": "tmodjs@1.0.4",
  "_inCache": true,
  "_location": "/tmodjs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tmodjs@git+https://github.com/calledT/tmodjs.git",
    "scope": null,
    "escapedName": "tmodjs",
    "name": "tmodjs",
    "rawSpec": "git+https://github.com/calledT/tmodjs.git",
    "spec": "git+https://github.com/calledT/tmodjs.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:calledT/tmodjs.git",
      "sshUrl": "git+ssh://git@github.com/calledT/tmodjs.git",
      "httpsUrl": "git+https://github.com/calledT/tmodjs.git",
      "gitUrl": "git://github.com/calledT/tmodjs.git",
      "shortcut": "github:calledT/tmodjs",
      "directUrl": "https://raw.githubusercontent.com/calledT/tmodjs/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/",
    "/gulp-tmod"
  ],
  "_resolved": "git+https://github.com/calledT/tmodjs.git#40597fd18f9a8fd5e28b5681490316f7ff3f2573",
  "_shasum": "54549a29c6dd83df737341da3d0a49a1592809ee",
  "_shrinkwrap": null,
  "_spec": "tmodjs@git+https://github.com/calledT/tmodjs.git",
  "_where": "F:\\grunt\\node_modules\\gulp-tmod",
  "author": {
    "name": "aui"
  },
  "bin": {
    "tmod": "./bin/tmod",
    "tmodjs": "./bin/tmod"
  },
  "bugs": {
    "url": "https://github.com/aui/tmodjs/issues"
  },
  "dependencies": {
    "art-template": "3.0.x",
    "semver": "2.3.0",
    "uglify-js": "2.4.0"
  },
  "description": "Template Compiler",
  "devDependencies": {},
  "gitHead": "40597fd18f9a8fd5e28b5681490316f7ff3f2573",
  "homepage": "https://github.com/aui/tmodjs",
  "keywords": [
    "template",
    "artTemplate",
    "TemplateJS",
    "CommonJS",
    "RequireJS",
    "SeaJS",
    "AMD",
    "CMD"
  ],
  "license": "BSD",
  "main": "./src/tmod.js",
  "name": "tmodjs",
  "optionalDependencies": {},
  "readme": "#\tTmodJS\r\n\r\nTmodJS（原名 atc）是一个简单易用的前端模板预编译工具。它通过预编译技术让前端模板突破浏览器限制，实现后端模板一样的同步“文件”加载能力。它采用目录来组织维护前端模板，从而让前端模板实现工程化管理，最终保证前端模板在复杂单页 web 应用下的可维护性。同时预编译输出的代码经过多层优化，能够在最大程度节省客户端资源消耗。\r\n\r\n一、**按文件与目录组织模板**\r\n\r\n```\r\ntemplate('tpl/home/main', data)\r\n```\r\n\r\n二、**模板支持引入子模板**\r\n\r\n```\r\n{{include '../public/header'}}\r\n```\r\n\r\nTmodJS 一经启动，就无需人工干预，每次模板创建与更新都会自动编译，引入一个 js 即可使用``template(path)``接口调用本地模板文件，直到正式上线都无需对代码进行任何修改，整个过程简单自然。\r\n\r\n##\t所有特性\r\n\r\n0.\t编译模板为不依赖引擎的 js 文件\r\n1.\t前端模板按文件与目录组织\r\n3.\t模板之间支持引入外部模板\r\n4.\t使用同步模板加载接口\r\n5.\t可选多种规范的模块输出：AMD、CMD、CommonJS\r\n6.\t支持作为 GruntJS 的插件构建项目\r\n7.\t模板目录可被前后端共享\r\n8.\t支持检测修改即时编译\r\n9.\t支持模板运行时调试\r\n10.\t配置文件支持多人共享\r\n\r\n若想深入了解，请阅读：《[进击！前端模板工程化](https://github.com/aui/tmodjs/blob/master/doc/why-tmodjs.md)》\r\n\r\n##\t文档目录\r\n\r\n*\t[安装](#安装)\r\n*\t[编写模板](#编写模板)\r\n*\t[编译模板](#编译模板)\r\n*\t[使用模板](#使用模板)\r\n*\t[演示](#演示)\r\n*\t[配置](#配置)\r\n*\t[grunt](#grunt)\r\n*\t[gulp](#gulp)\r\n*\t[常见问题](#常见问题)\r\n*\t[更新日志](#更新日志)\r\n*\t[加入我们](#加入我们)\r\n*\t[授权协议](#授权协议)\r\n\r\n##\t安装\r\n\r\n使用 [NodeJS](http://nodejs.org) 附带的``npm``命令，执行：\r\n\r\n```\r\nnpm install -g tmodjs\r\n```\t\r\n\r\n> Mac OSX 可能需要管理员权限运行： ``sudo npm install -g tmodjs``\r\n\r\n##\t编写模板\r\n\r\nTmodJS 的前端模板不再耦合在业务页面中，而是和后端模板一样有专门的目录管理。目录名称只支持英文、数字、下划线的组合，一个模板对应一个``.html``文件。\r\n\r\n支持基本的模板语法，如输出变量、条件判断、循环、包含子模板。[模板语法参考](https://github.com/aui/tmodjs/wiki/模板语法)\r\n\r\n> 完全支持 [artTemplate](https://github.com/aui/artTemplate) 的语法\r\n\r\n##\t编译模板\r\n\r\n只需要运行``tmod``这个命令即可，默认配置参数可以满足绝大多数项目。\r\n\r\n```\r\ntmod [模板目录] [配置参数]\r\n```\r\n\r\n模板目录必须是模板的根目录，若无参数则为默认使用当前工作目录，tmodjs 会监控模板目录修改，每次模板修改都会增量编译。\r\n\r\n###\t配置参数\r\n            \r\n*\t``--debug``\t\t\t输出调试版本\r\n*\t``--charset value`` 定义模板编码，默认``utf-8``\r\n*\t``--output value``  定义输出目录，默认``./build``\r\n*\t``--type value``\t定义输出模块格式，默认``default``，可选``cmd``、``amd``、``commonjs``\r\n*\t``--no-watch``\t\t关闭模板目录监控\r\n*\t``--version``\t\t显示版本号\r\n*\t``--help``\t\t\t显示帮助信息\r\n\r\n配置参数将会保存在模板目录[配置文件](#配置)中，下次运行无需输入配置参数（``--no-watch`` 与 ``--debug`` 除外）。\r\n\r\n####\t示例\r\n\r\n```\r\ntmod ./tpl --output ./build\r\n```\r\n\r\n##\t使用模板\r\n\r\n根据编译的``type``的配置不同，会有两种不同使用方式：\r\n\r\n###\t使用默认的格式\r\n\r\nTmodJS 默认将整个目录的模板压缩打包到一个名为 template.js 的脚本中，可直接在页面中使用它：\r\n\r\n\t<script src=\"tpl/build/template.js\"></script>\r\n\t<script>\r\n\t\tvar html = template('news/list', _list);\r\n\t\tdocument.getElementById('list').innerHTML = html;\r\n\t</script>\r\n\r\n> template.js 还支持 RequireJS、SeaJS、NodeJS 加载。[示例](http://aui.github.io/tmodjs/test/index.html)\r\n\r\n###\t指定格式（amd / cmd / commonjs)\r\n\r\n此时每个模板就是一个单独的模块，无需引用 template.js：\r\n\r\n```\r\nvar render = require('./tpl/build/news/list');\r\nvar html = render(_list);\r\n```\r\n\r\n>\t注意：模板路径不能包含模板后缀名\r\n\r\n##\t演示\r\n\r\n[TmodJS 源码包](https://github.com/aui/tmodjs/archive/master.zip)中``test/tpl``是一个演示项目的前端模板目录，基于默认配置。切换到源码目录后，编译：\r\n\r\n```\r\ntmod test/tpl\r\n```\r\n\r\n编译完毕后你可以在浏览器中打开 [test/index.html](http://aui.github.io/tmodjs/test/index.html) 查看如何使用编译后的模板。\r\n\r\n##\t配置\r\n\r\nTmodJS 的项目配置文件保存在模板目录的 package.json 文件中：\r\n\r\n```\r\n{\r\n    \"name\": \"template\",\r\n    \"version\": \"1.0.0\",\r\n    \"dependencies\": {\r\n        \"tmodjs\": \"1.0.0\"\r\n    },\r\n    \"tmodjs-config\": {\r\n        \"output\": \"./build\",\r\n        \"charset\": \"utf-8\",\r\n        \"syntax\": \"simple\",\r\n        \"helpers\": null,\r\n        \"escape\": true,\r\n        \"compress\": true,\r\n        \"type\": \"default\",\r\n        \"runtime\": \"template.js\",\r\n        \"combo\": true,\r\n        \"minify\": true,\r\n        \"cache\": false\r\n    }\r\n}\r\n```\r\n\r\n字段 | 类型 | 默认值| 说明\r\n------------ | ------------- | ------------ | ------------\r\noutput | String | ``\"./build\"`` | 编译输出目录设置。如果设置为 false 则不输出\r\ncharset | String | ``\"utf-8\"`` | 模板使用的编码（暂时只支持 utf-8）\r\nsyntax | String | ``\"simple\"`` | 定义模板采用哪种语法。可选：``simple``、``native``\r\nhelpers | String | ``null`` | 自定义辅助方法路径\r\nescape | Boolean | ``true`` | 是否过滤 XSS。如果后台给出的数据已经进行了 XSS 过滤，就可以关闭模板的过滤以提升模板渲染效率\r\ncompress | Boolean | ``true`` | 是否压缩 HTML 多余空白字符\r\ntype | String | ``\"default\"`` |  输出的模块类型，可选：``default``、``cmd``、``amd``、``commonjs``\r\nruntime | String | ``\"template.js\"`` | 设置输出的运行时名称\r\nalias | String | ``null`` | 设置模块依赖的运行时路径（仅针对于非``default``的类型模块配置字段。如果不指定模块内部会自动使用相对 runtime 的路径）\r\ncombo | Boolean | ``true`` | 是否合并模板（仅针对于 default 类型的模块）\r\nminify | Boolean | ``true`` | 是否输出为压缩的格式\r\ncache | Boolean | ``true`` | 是否开启编译缓存\r\nverbose | Boolean | ``true`` | 是否打印日志\r\n\t\r\n##\tgrunt\r\n\r\n让 TmodJS 作为 Grunt 的一个插件使用：\r\n\r\n```\r\nnpm install grunt-tmod --save-dev\r\n```\r\n\r\n由[@Jsonzhang](https://github.com/Jsonzhang)开发，项目主页：\r\n\r\n<https://github.com/Jsonzhang/grunt-tmod>\r\n\r\n## gulp\r\n\r\n让 TmodJS 作为 Gulp 的一个插件使用：\r\n\r\n```\r\nnpm install gulp-tmod --save-dev\r\n```\r\n\r\n由[@lichunqiang](https://github.com/lichunqiang)开发，项目主页：\r\n\r\n<https://github.com/lichunqiang/gulp-tmod>\r\n\r\n##\t常见问题\r\n\r\n**问**：TmodJS 需要部署到服务器中吗？\r\n\r\n> 不需要，这是本地工具，基于 NodeJS 编写是为了实现跨平台。\r\n\r\n**问**：如何将每个模板都编译成单独的 amd/cmd 模块输出？\r\n\r\n> 指定 type 参数即可，如``--type cmd``则可以让每个模板都支持 RequireJS/SeaJS 调用。\r\n\r\n**问**：如何将模板编译成 NodeJS 的模块？\r\n\r\n> 指定 type 参数即可，如``--type commonjs``。\r\n\r\n**问**：线上运行的模板报错了如何调试？\r\n\r\n> 开启 debug 模式编译，如``--debug``，这样会输出调试版本，可以让你快速找到模板运行错误的语句以及数据。\r\n\r\n**问**：如何不压缩输出 js？\r\n\r\n> 编辑配置文件，设置``\"minify\": false``。\r\n\r\n**问**：如何修改默认的输出目录？\r\n\r\n> 指定 output 参数即可，如``--output ../../build``。\r\n\r\n**问**：如何让模板访问全局变量？\r\n\r\n> 请参考：[辅助方法](https://github.com/aui/tmodjs/wiki/辅助方法)。\r\n\r\n**问**：可以使用使用类似 tmpl 那种的 js 原生语法作为模板语法吗？\r\n\r\n> 可以。编辑配置文件，设置``\"syntax\": \"native\"``即可，目前 TmodJS 默认使用的是 simple 语法。\r\n\r\n**问**：如何兼容旧版本 atc 的项目？\r\n\r\n> 编辑配置文件，分别设置``\"type\": \"cmd\"``、``\"syntax\": \"native\"``、``\"output\": \"./\"``\r\n\r\n**问**：如何迁移原来写在页面中的 artTemplate 模板，改为 TmodJS 这种按按文件存放的方式？\r\n\r\n> 请参考：[页面中的模板迁移指南](https://github.com/aui/tmodjs/wiki/页面中的模板迁移指南)。\r\n\r\n**问**：我需要手动合并模板，如何让 tmodjs 不合并输出？\r\n\r\n> 编辑配置文件，设置``combo:false``。\r\n\r\n##\t更新日志\r\n\r\n### v1.0.4 \r\n\r\n*   设置``\"output\":false``则不进行输出，方便Gulp插件利用\r\n*   新增``\"verbose\": true``选项，选择是否显示日志\r\n\r\n### v1.0.1\r\n\r\n*   解决新版本设置``\"minify\":true``输出后，输出的脚本中文没有被编码的问题\r\n*   给引入后缀名的模板给予报错提示\r\n\r\n###\tv1.0.0\r\n\r\n*\t使用 artTemplate3.0 作为模板引擎，NodJS 可直接共享前端的模板目录的模板，无需预编译\r\n*\t提供 GruntJS 插件\r\n*\t取消``engine``配置\r\n*\t增加``runtime``配置\r\n*\t接口重构，支持多实例\r\n\r\n###\tv0.1.1\r\n\r\n*\t给压缩打包合并后的每条模板增加版本标记，例如``/*v:13*/``，以便对比线上版本\r\n\r\n###\tv0.1.0\r\n\r\n*\t增加自动递增的模板版本号，控制台可显示模板被修改的次数\r\n*\t优化默认设置下的文件输出，仅保留``template.js``，临时文件使用隐藏的``.cache``目录存放\r\n*\t自动清理``.debug.js``文件\r\n*\t对非规范的``include``语句模板在编译过程给予提示\r\n*\t修复``compileError``事件触发异常的 bug\r\n*\t减少对磁盘的读写，优化性能\r\n\r\n###\tv0.0.4\r\n\r\n*\t增加``escape``配置，如果后台给出的数据已经进行了 XSS 过滤，就可以关闭模板的默认过滤以提升模板渲染效率\r\n*\t简化``combo``功能，default只提供全部合并与不合并两个选项，值为布尔类型（兼容旧的版本的配置，会自动转换成布尔类型）\r\n*\t取消鸡肋的异步载入插件，同时``async``配置失效\r\n*\t为了便于理解，命令行输入的``--output``参数不再相对于模板目录，而是工作目录（配置文件的``output``参数仍保持不变）\r\n*\t优化控制台日志显示\r\n\r\n###\tv0.0.3\r\n\r\n*\t修复``combo``配置不能为空数组的 BUG\r\n*\t支持页面内嵌动态编译与预编译两种方案共存（请设置``engine:true``，并在页面中中引入 TmodJS 输出的 template.js。如果想让 template.js 不内置合并的模板，可以设置``combo:[]``）\r\n*\t运行时性能优化\r\n*\t增加``alias``配置字段，在 AMD 与 CMD 模式下可以指定运行时依赖 ID\r\n\r\n###\tv0.0.2\r\n\r\n修复极其特殊情况下 TmodJS 无法为 AMD/CMD 模块正确声明依赖的问题[#14](https://github.com/aui/tmodjs/issues/14)\r\n\r\n###\tv0.0.1\r\n\r\n这是一个革命性的版本，内部大量优化！同时项目更名为 **TmodJS**，内部版本号收归到 0.0.1\r\n\r\n使用 TemplageJS 格式的模块作为默认输出的类型：它包含模板目录中所有模板，除了支持页面 Script 直接引入之外还支持 RequireJS、SeaJS、NodeJS 加载，并且接口统一，跨架构与前后端运行！\r\n\r\n详细更新列表：\r\n\r\n*\t吸收了来自业务的一些建议，编译方案的大调整，内部进行无数次优化，编译后的代码更小\r\n*\t编译后的脚本使用统一的接口：``template(path, data)`` 其中 path 相对于 template.js 所在目录\r\n*\t自动打包目录与子目录的模板\r\n*\t可选支持异步载入模板功能\r\n*\t可选嵌入完整模板引擎（使用字符串存储模板）\r\n*\t可选支持 RequireJS/SeaJS/NodeJS 模块\r\n*\t保存模板配置文件（方便多人协作中使用版本管理工具共享配置）\r\n*\t可选编译调试版本\r\n*\t编译后的函数体优化\r\n*\t错误处理优化\r\n*\t``compile(file)``接口可递归编译依赖\r\n*\t增加``saveUserConfig``接口保存用户设置\r\n*\t默认语法变更：默认使用简洁语法，取消``--define-syntax``，并使用新的界定符 ``{{``与``}}``。[模板语法参考](https://github.com/aui/tmodjs/wiki/模板语法)\r\n*\t取消``--clone-helpers``参数\r\n\r\n###\tatc v1.0.3\r\n\r\n*\t默认使用简洁语法，取消--define-syntax，增加--no-define-syntax参数恢复原生语法\r\n*\t增加-t, --type设置输出的模块类型，默认 CMD ，可选：CMD | AMD | CommonJS。让模板可以前后端共用\r\n*\t优化无逻辑语句的模板编译后的函数体积\r\n*\t因 Windows 批处理无法模拟 NodeJS 的高级特性，atc 不再包含 Windows 批处理脚本，若需要可用批处理调用 NodeJS\r\n*\t模板语法的界定符有变更，请参考：模板语法\r\n\r\n###\tatc v1.0.2\r\n\r\nNodeJS 版本：\r\n\r\n*\t增加``-o path``或``--output path``定义输出目录\r\n*\t修复``-d``或``--define-syntax``可能失效的问题\r\n*\t修改``-w``或``--watch``参数启动后的规则：只监控模板修改，而不再编译所有模板\r\n*\t增强调试特性：模板语法错误将在控制台输出调试源码，并停止进程\r\n\r\n###\tatc v1.0.1\r\n\r\nNodeJS 版本：\r\n\r\n*\t支持监控目录，即时编译\r\n*\t使用命令行传递参数\r\n*\t使用 npm 管理包\r\n*\t支持设置简洁语法\r\n\r\n###\tatc v1.0.0\r\n\r\n*\t支持前端模板按文件与目录组织，自动处理 include 依赖\r\n*\tNodeJS 与 Windows 批处理版本同时发布\r\n\r\n##\t加入我们\r\n\r\nTmodJS 是一个开源项目，如果你喜欢，非常期待你通过微博或者博客等来宣传 TmodJS。\r\n\r\n###\t使用 TmodJS 的项目\r\n\r\n*\tQQ空间\r\n*\t腾讯视频\r\n*\t爱奇艺\r\n*\t爱拍原创\r\n*\tSpa（迅雷）\r\n*\tMicroTrend（腾讯）\r\n*\tTracker（腾讯）\r\n*\tUR（腾讯）\r\n*\t……\r\n\r\n如果你使用了 TmodJS 敬请留下项目名，我们将在 TmodJS 主页展示你的项目。[提交](https://github.com/aui/tmodjs/issues/1)\r\n\r\n###\t代码贡献名单\r\n\r\n*\t[@aui](https://github.com/aui)\r\n*\t[@Jsonzhang](https://github.com/Jsonzhang)（grunt 插件作者）\r\n*\t[@lichunqiang](https://github.com/lichunqiang)（gulp 插件作者）\r\n*\t[@TooBug](https://github.com/TooBug)\r\n*\t[@bammoo](https://github.com/bammoo)\r\n\r\n###\t特别感谢\r\n\r\n*\t[@warmhug](https://github.com/warmhug)（在工具雏形阶段的热心的测试与反馈）\r\n\r\n##\t授权协议\r\n\r\nBSD.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aui/tmodjs.git"
  },
  "scripts": {
    "test": "tmod ./test/tpl",
    "test2": "tmod ./test/test-all/*"
  },
  "version": "1.0.4"
}
